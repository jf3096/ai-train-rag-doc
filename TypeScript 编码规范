# TypeScript 编码规范

本文档旨在为TypeScript项目提供一套统一的编码规范，确保代码的一致性、可读性和可维护性。

## 1. 最佳实践

在编写TypeScript代码时，遵循以下最佳实践可以帮助我们提高代码的质量和可维护性：

- **保持代码简洁**：避免不必要的复杂性，使代码易于理解。
- **定期审查和更新代码**：确保代码反映最新的最佳实践和规范。

## 2. 命名约定

### 2.1 接口（Interface）命名

接口应以 `I` 开头，以区分于类型别名和类。

#### 示例：不推荐（Bad）

```typescript
interface User {...}
```

#### 示例：推荐（Good）

```typescript
interface IUser {...}
```

### 2.2 类型别名（Type）命名

类型别名应以 `I` 开头。

#### 示例：不推荐（Bad）

```typescript
type UserInfo = {...};
```

#### 示例：推荐（Good）

```typescript
type IUserInfo = {...};
```

## 3. 代码风格

### 3.1 使用 `let` 和 `const`

优先使用 `const`，只有在变量需要重新赋值时才使用 `let`。

#### 示例：不推荐（Bad）

```typescript
let count = 0;
count += 1;
```

#### 示例：推荐（Good）

```typescript
const count = 0;
// 或者，如果需要重新赋值
let mutableCount = 0;
mutableCount += 1;
```

### 3.2 箭头函数

优先使用箭头函数，除非需要使用传统函数表达式来绑定 `this` 上下文。

#### 示例：不推荐（Bad）

```typescript
function add(a: number, b: number): number {
    return a + b;
}
```

#### 示例：推荐（Good）

```typescript
const add = (a: number, b: number): number => a + b;
```

### 3.3 导入和导出

使用ES6模块语法进行导入和导出。

#### 示例：不推荐（Bad）

```typescript
import * as _ from 'lodash';
```

#### 示例：推荐（Good）

```typescript
import { map } from 'lodash';
```

## 4. 类型注解

始终在变量、参数和返回值上添加类型注解。

#### 示例：不推荐（Bad）

```typescript
function add(a, b) {
    return a + b;
}
```

#### 示例：推荐（Good）

```typescript
function add(a: number, b: number): number {
    return a + b;
}
```
